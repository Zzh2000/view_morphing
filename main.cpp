#include <iostream>
#include <sstream>
#include <cstring>
#include <cmath>
#include<Eigen/Core>
#include<Eigen/Dense>
#include <opencv2/opencv.hpp>
#include<opencv2/core/eigen.hpp>
using namespace std;
using namespace cv;
using namespace Eigen;
#include <opencv2/imgproc/imgproc.hpp>
//#include <opencv2/highgui/highgui.hpp>
#define EPS 1e-6
string num2str(double i){

    stringstream ss;

    ss << i;

    return ss.str();

}

cv::Mat PointVec2HomogeneousMat(const std::vector<cv::Point2f>& pts)
{
    int num_pts = pts.size();
    cv::Mat homMat(3, num_pts, CV_32FC1);
    for(int i=0; i<num_pts; i++){
        homMat.at<float>(0,i) = pts[i].x;
        homMat.at<float>(1,i) = pts[i].y;
        homMat.at<float>(2,i) = 1.0;
    }
    return homMat;
}


// Morph points
void MorphPoints(const std::vector<cv::Point2f>& srcPts1, const std::vector<cv::Point2f>& srcPts2, std::vector<cv::Point2f>& dstPts, float s = 0.5)
{
    assert(srcPts1.size() == srcPts2.size());
    
    int num_pts = srcPts1.size();

    dstPts.resize(num_pts);
    for(int i=0; i<num_pts; i++){
        dstPts[i].x = (1.0 - s) * srcPts1[i].x + s * srcPts2[i].x;
        dstPts[i].y = (1.0 - s) * srcPts1[i].y + s * srcPts2[i].y;
    }
}


void GetTriangleVertices(const cv::Subdiv2D& sub_div, const std::vector<cv::Point2f>& points, std::vector<cv::Vec3i>& triangle_vertices)
{
    std::vector<cv::Vec6f> triangles;
    sub_div.getTriangleList(triangles);

    int num_triangles = triangles.size();
    triangle_vertices.clear();
    triangle_vertices.reserve(num_triangles);
    for(int i=0; i<num_triangles; i++){
        std::vector<cv::Point2f>::const_iterator vert1, vert2, vert3;
        vert1 = std::find(points.begin(), points.end(), cv::Point2f(triangles[i][0],triangles[i][1]));
        vert2 = std::find(points.begin(), points.end(), cv::Point2f(triangles[i][2],triangles[i][3]));
        vert3 = std::find(points.begin(), points.end(), cv::Point2f(triangles[i][4],triangles[i][5]));

        cv::Vec3i vertex;
        if(vert1 != points.end() && vert2 != points.end() && vert3 != points.end()){
            vertex[0] = vert1 - points.begin();
            vertex[1] = vert2 - points.begin();
            vertex[2] = vert3 - points.begin();
            triangle_vertices.push_back(vertex);
        }
    }
}


void TransTrianglerPoints(const std::vector<cv::Vec3i>& triangle_vertices,
    const std::vector<cv::Point2f>& points,
    std::vector<std::vector<cv::Point2f>>& triangler_pts)
{
    int num_triangle = triangle_vertices.size();
    triangler_pts.resize(num_triangle);
    for(int i=0; i<num_triangle; i++){
        std::vector<cv::Point2f> triangle;
        for(int j=0; j<3; j++){
            triangle.push_back(points[triangle_vertices[i][j]]);
        }
        triangler_pts[i] = triangle;
    }
}


void PaintTriangles(cv::Mat& img, const std::vector<std::vector<cv::Point2f>>& triangles)
{
    int num_triangle = triangles.size();

    for(int i=0; i<num_triangle; i++){
        std::vector<cv::Point> poly(3);

        for(int j=0;j<3;j++){
            poly[j] = cv::Point(cvRound(triangles[i][j].x), cvRound(triangles[i][j].y));
        }
        cv::fillConvexPoly(img, poly,  cv::Scalar(i+1));
    }
}

///// for debug /////
void DrawTriangles(cv::Mat& img, const std::vector<std::vector<cv::Point2f>>& triangles)
{
    int num_triangle = triangles.size();

    std::vector<std::vector<cv::Point>> polies;
    for(int i=0; i<num_triangle; i++){
        std::vector<cv::Point> poly(3);

        for(int j=0;j<3;j++){
            poly[j] = cv::Point(cvRound(triangles[i][j].x), cvRound(triangles[i][j].y));
        }
        polies.push_back(poly);
    }
    cv::polylines(img, polies, true, cv::Scalar(255,0,255));
}
//////////////////////

void SolveHomography(const std::vector<cv::Point2f>& src_pts1, const std::vector<cv::Point2f>& src_pts2, cv::Mat& H)
{
    assert(src_pts1.size() == src_pts2.size());

    H = PointVec2HomogeneousMat(src_pts2) * PointVec2HomogeneousMat(src_pts1).inv();
}


void SolveHomography(const std::vector<std::vector<cv::Point2f>>& src_pts1,
    const std::vector<std::vector<cv::Point2f>>& src_pts2,
    std::vector<cv::Mat>& Hmats)
{
    assert(src_pts1.size() == src_pts2.size());
    
    int pts_num = src_pts1.size();
    Hmats.clear();
    Hmats.reserve(pts_num);
    for(int i=0; i<pts_num; i++){
        cv::Mat H;
        SolveHomography(src_pts1[i], src_pts2[i], H);
        Hmats.push_back(H);
    }
}


// Morph homography matrix
void MorphHomography(const cv::Mat& Hom, cv::Mat& MorphHom1, cv::Mat& MorphHom2, float blend_ratio)
{
    cv::Mat invHom = Hom.inv();
    MorphHom1 = cv::Mat::eye(3,3,CV_32FC1) * (1.0 - blend_ratio) + Hom * blend_ratio;
    MorphHom2 = cv::Mat::eye(3,3,CV_32FC1) * blend_ratio + invHom * (1.0 - blend_ratio);
}



// Morph homography matrix
void MorphHomography(const std::vector<cv::Mat>& Homs,
    std::vector<cv::Mat>& MorphHoms1,
    std::vector<cv::Mat>& MorphHoms2,
    float blend_ratio)
{
    int hom_num = Homs.size();
    MorphHoms1.resize(hom_num);
    MorphHoms2.resize(hom_num);
    for(int i=0; i<hom_num; i++){
        MorphHomography(Homs[i], MorphHoms1[i], MorphHoms2[i], blend_ratio);
    }
}


// create a map for cv::remap()
void CreateMap(const cv::Mat& TriangleMap, const std::vector<cv::Mat>& HomMatrices, cv::Mat& map_x, cv::Mat& map_y)
{
    assert(TriangleMap.type() == CV_32SC1);

    // Allocate cv::Mat for the map
    map_x.create(TriangleMap.size(), CV_32FC1);
    map_y.create(TriangleMap.size(), CV_32FC1);

    // Compute inverse matrices
    std::vector<cv::Mat> invHomMatrices(HomMatrices.size());
    for(int i=0; i<HomMatrices.size(); i++){
        invHomMatrices[i] = HomMatrices[i].inv();
    }

    for(int y=0; y<TriangleMap.rows; y++){
        for(int x=0; x<TriangleMap.cols; x++){
            int idx = TriangleMap.at<int>(y,x)-1;
            if(idx >= 0){
                cv::Mat H = invHomMatrices[TriangleMap.at<int>(y,x)-1];
                float z = H.at<float>(2,0) * x + H.at<float>(2,1) * y + H.at<float>(2,2);
                if(z==0)
                    z = 0.00001;
                map_x.at<float>(y,x) = (H.at<float>(0,0) * x + H.at<float>(0,1) * y + H.at<float>(0,2)) / z;
                map_y.at<float>(y,x) = (H.at<float>(1,0) * x + H.at<float>(1,1) * y + H.at<float>(1,2)) / z;
            }
            else{
                map_x.at<float>(y,x) = x;
                map_y.at<float>(y,x) = y;
            }
        }
    }
}


//! Image Morphing
/*!
\param[in] src_img1 Input image 1
\param[in] src_points1 Points on the image 1
\param[in] src_img2 Input image 2
\param[in] src_points2 Points on the image 2, which must be corresponded to src_point1
\param[out] dst_img Morphed output image
\param[out] dst_points Morphed points on the output image
\param[in] shape_ratio blending ratio (0.0 - 1.0) of shape between image 1 and 2.  If it is 0.0, output shape is same as src_img1.
\param[in] color_ratio blending ratio (0.0 - 1.0) of color between image 1 and 2.  If it is 0.0, output color is same as src_img1. If it is negative, it is set to shape_ratio.
*/
void ImageMorphing(const cv::Mat& src_img1, const std::vector<cv::Point2f>& src_points1,
    const cv::Mat& src_img2, const std::vector<cv::Point2f>& src_points2,
    cv::Mat& dst_img, std::vector<cv::Point2f>& dst_points,
    float shape_ratio = 0.5, float color_ratio = -1)
{
    // Input Images
    cv::Mat SrcImg[2];
    SrcImg[0] = src_img1;
    SrcImg[1] = src_img2;

    // Input Points
    std::vector<cv::Point2f> SrcPoints[2];
    SrcPoints[0].insert(SrcPoints[0].end(), src_points1.begin(), src_points1.end());
    SrcPoints[1].insert(SrcPoints[1].end(), src_points2.begin(), src_points2.end());

    // Add 4 corner points of image to the points
    cv::Size img_size[2];
    for(int i=0; i<2; i++){
        img_size[i] = SrcImg[i].size();
        float w = img_size[i].width - 1;
        float h= img_size[i].height - 1;
        SrcPoints[i].push_back(cv::Point2f(0,0));
        SrcPoints[i].push_back(cv::Point2f(w,0));
        SrcPoints[i].push_back(cv::Point2f(0,h));
        SrcPoints[i].push_back(cv::Point2f(w,h));
    }

    // Morph points
    std::vector<cv::Point2f> MorphedPoints;
    MorphPoints(SrcPoints[0], SrcPoints[1], MorphedPoints, shape_ratio);

    // Generate Delaunay Triangles from the morphed points
    int num_points = MorphedPoints.size();
    cv::Size MorphedImgSize(MorphedPoints[num_points-1].x+1,MorphedPoints[num_points-1].y+1);
    cv::Subdiv2D sub_div(cv::Rect(0,0,MorphedImgSize.width,MorphedImgSize.height));
    sub_div.insert(MorphedPoints);

    // Get the ID list of corners of Delaunay traiangles.
    std::vector<cv::Vec3i> triangle_indices;
    GetTriangleVertices(sub_div, MorphedPoints, triangle_indices);

    // Get coordinates of Delaunay corners from ID list
    std::vector<std::vector<cv::Point2f>> triangle_src[2], triangle_morph;
    TransTrianglerPoints(triangle_indices, SrcPoints[0], triangle_src[0]);
    TransTrianglerPoints(triangle_indices, SrcPoints[1], triangle_src[1]);
    TransTrianglerPoints(triangle_indices, MorphedPoints, triangle_morph);

    // Create a map of triangle ID in the morphed image.
    cv::Mat triangle_map = cv::Mat::zeros(MorphedImgSize, CV_32SC1);
    PaintTriangles(triangle_map, triangle_morph);

    // Compute Homography matrix of each triangle.
    std::vector<cv::Mat> homographyMats, MorphHom[2];
    SolveHomography(triangle_src[0], triangle_src[1], homographyMats);
    MorphHomography(homographyMats, MorphHom[0], MorphHom[1], shape_ratio);

    cv::Mat trans_img[2];
    for(int i=0; i<2; i++){
        // create a map for cv::remap()
        cv::Mat trans_map_x, trans_map_y;
        CreateMap(triangle_map, MorphHom[i], trans_map_x, trans_map_y);

        // remap
        cv::remap(SrcImg[i], trans_img[i], trans_map_x, trans_map_y, cv::INTER_LINEAR);
    }

    // Blend 2 input images
    float blend = (color_ratio < 0) ? shape_ratio : color_ratio;
    dst_img = trans_img[0] * (1.0 - blend) + trans_img[1] * blend;

    dst_points.clear();
    dst_points.insert(dst_points.end(), MorphedPoints.begin(), MorphedPoints.end() - 4);

}



//match point（used in both stereo rectify uncalibrated and morph）

double match_1[]={178,859,182,937,191,1018,205,1093,239,1159,302,1197,394,1206,497,1204,611,1201,727,1198,823,1196,910,1181,967,1140,993,1074,1000,995,1005,915,1005,836,260,650,308,585,378,545,462,532,543,550,632,545,709,526,791,536,863,571,913,634,590,621,592,647,594,672,595,701,516,814,557,813,599,812,640,810,680,810,333,699,374,651,429,649,484,690,432,692,377,698,691,682,743,635,797,638,839,683,799,682,744,680,453,971,507,900,566,864,602,872,639,865,700,900,760,967,699,977,640,982,600,982,562,982,508,976,481,962,565,922,602,921,640,921,732,959,639,923,601,925,564,923,//人脸68个特征点
    191.75, 946.0, 193.52457921862586, 930.0287870323672, 194.75, 914.0271588488278, 194.75, 897.9576605660355, 194.75, 881.8881622832433, 196.33127970160126, 865.9310420887912, 198.60384994280685, 850.023050400352, 200.8969604788101, 834.1182371271395, 203.5387697230063, 818.2673816619622, 206.18057896720254, 802.4165261967848, 208.53273574740368, 786.5208497681742, 210.80530598860926, 770.612858079735, 213.10253470632674, 754.7085244088762, 215.54601736758167, 738.8258871107191, 217.9895000288366, 722.943249812562, 222.47260171048762, 707.5767152106347, 227.87735886449002, 692.443395179428, 233.28211601849242, 677.3100751482212, 237.0505731051094, 661.6975165445258, 240.66395256187462, 646.0395388985432, 244.30572300705796, 630.3881772200036, 247.98627018705253, 614.7458517050268, 251.6668173670471, 599.1035261900499, 255.62720932548282, 583.5438138886482, 261.0319664794852, 568.4104938574415, 266.43672363348765, 553.2771738262347, 274.1470865501175, 539.6029134498825, 285.50993775614546, 528.2400622438546, 296.87278896217344, 516.8772110378267, 308.23564016820137, 505.51435983179863, 319.59849137422935, 494.15150862577065, 330.96134258025734, 482.78865741974266, 342.3241937862853, 471.4258062137147, 355.26619234069125, 461.9892051062058, 368.63682311675, 453.07545125549996, 382.00745389280877, 444.1616974047941, 395.3239151246637, 435.1679333517937, 408.56585541053425, 426.0640994052577, 421.8077956964048, 416.9602654587217, 435.04973598227537, 407.85643151218574, 449.0376284409509, 399.9799314981595, 463.2165975140029, 392.4178146591984, 477.3955665870549, 384.85569782023737, 491.9674047979914, 378.1189874534773, 506.7776228761331, 371.8831061574176, 521.5878409542748, 365.6472248613579, 536.3980590324165, 359.41134356529824, 551.9820110260264, 355.7759979952679, 567.7923068568678, 352.90139875329675, 583.7560951907874, 351.26626032061415, 599.7900020715598, 350.1973331952293, 615.8239089523322, 349.12840606984446, 631.6739845109715, 351.4571737372303, 647.4989622183184, 354.2498168620562, 663.3239399256653, 357.04245998688214, 679.2280546106916, 359.30975682633647, 695.1734622465947, 361.30293278082434, 711.1188698824977, 363.2961087353122, 726.4827162205893, 367.649768582721, 741.5290563316634, 373.29214612437374, 756.5753964427374, 378.9345236660265, 770.856431967714, 386.07095464514265, 784.2270627437728, 394.9847084958485, 797.5976935198315, 403.89846234655437, 810.7295273088365, 413.088363676485, 821.479454914892, 425.0327276832134, 832.2293825209475, 436.9770916899418, 843.6714556966701, 448.2293101270031, 855.6158197033985, 458.9792377330586, 867.5207398185901, 469.77073981859, 878.883591024618, 481.133591024618, 890.2464422306459, 492.496442230646, 901.6092934366739, 503.85929343667397, 909.2150519285252, 517.9301038570504, 916.4015500334531, 532.3031000669063, 923.5880481383809, 546.6760962767621, 930.7745462433089, 561.049092486618, 937.9610443482368, 575.4220886964738, 945.1475424531646, 589.7950849063296, 950.8366646672366, 604.7744381129161, 955.6756946671967, 620.0980331127896, 960.5147246671568, 635.4216281126631, 965.3537546671168, 650.7452231125367, 968.7894050700709, 666.4371740828365, 972.0998901415385, 682.1619781723077, 975.4103752130061, 697.886782261779, 978.6317984083568, 713.6294416438731, 981.6385961047847, 729.4151295501196, 984.6453938012127, 745.200817456366, 987.6521914976406, 760.9865053626125, 990.6190240954132, 776.7796325247731, 993.4936233373844, 792.5899283556145, 996.3682225793556, 808.4002241864558, 999.2428218213267, 824.2105200172972, 1002.1528119875347, 840.0140599376736, 1005.3042998843656, 855.771499421828, 1008.4557877811965, 871.5289389059825, 1011.6072756780273, 887.286378390137, 1014.4774297587944, 903.0920083115607, 1016.75, 918.9999999999999 //额头轮廓100点
};



double match_2[]={163,860,179,995,198,1123,225,1247,277,1357,361,1458,451,1551,552,1626,670,1642,784,1613,875,1527,952,1427,1015,1322,1054,1210,1072,1090,1085,966,1089,834,221,871,284,807,379,800,471,817,558,858,721,843,807,798,894,774,987,770,1050,828,648,935,655,1035,663,1133,670,1233,532,1229,596,1256,666,1284,730,1250,784,1214,340,947,395,926,455,927,515,958,454,975,392,976,759,944,817,903,879,893,936,909,887,945,824,952,421,1282,510,1309,590,1320,657,1332,724,1312,797,1290,881,1257,808,1365,736,1426,664,1441,591,1435,509,1388,454,1299,590,1348,659,1356,726,1341,850,1279,731,1356,661,1375,591,1365,//人脸68个特征点
    179.75, 1018.0, 177.06343391861768, 996.5074713489414, 176.75, 974.8671968330143, 176.75, 953.2074086270736, 176.75, 931.5476204211329, 172.9733406144631, 910.2283733795471, 170.75, 888.7690636717484, 170.75, 867.1092754658077, 167.53591550422166, 845.7154930253299, 163.9750682579165, 824.3504095474989, 160.41422101161132, 802.9853260696678, 157.7919269708104, 781.503123649725, 155.99317946571767, 759.9181535886123, 155.75, 738.2684803301191, 154.38877597202202, 716.6653116642641, 152.43331620118482, 695.0998972071089, 148.87246895487965, 673.7348137292779, 146.75, 652.2506864245224, 146.75, 630.5908982185817, 148.74310050472525, 609.0551959621979, 151.80914393588884, 587.6155644167226, 155.1026703420209, 566.2076427768642, 159.9707606660042, 545.1169573359832, 165.2240309366866, 524.1038762532536, 170.477301207369, 503.0907951705239, 177.66035697163264, 482.8310122186735, 188.0321927041373, 463.815980042415, 198.28919508543441, 444.7390092148105, 208.48203659411237, 425.6274313860393, 218.88174282452007, 406.6312980151084, 229.79548252048193, 387.9220299648881, 242.54227004726187, 370.6904191233433, 258.50887259914225, 356.0543667841196, 274.6745258470092, 341.66763595207055, 292.48303458259164, 329.3386683658981, 310.2915433181741, 317.0097007797257, 326.36224600652037, 302.5117729170581, 342.2779329901474, 287.8203695475562, 358.9189496395136, 274.00943693102334, 376.3855110579606, 261.2006252241622, 393.85207247640767, 248.39181351730102, 413.6753771424865, 239.8298491430054, 433.7859856212139, 231.78560575151442, 453.8965940999413, 223.74136236002346, 474.8265027589888, 218.2308743102528, 495.8395838417185, 212.9776040395704, 516.8526649244482, 207.724333768888, 538.0494758719145, 203.37376696759245, 559.4442124986141, 199.99565065811356, 580.8389491253137, 196.61753434863468, 602.4320276182006, 195.19627147189996, 624.0694746235533, 194.21275115347484, 645.7069216289061, 193.22923083504972, 667.3615027313729, 193.0, 689.0212909373136, 193.0, 710.6810791432542, 193.0, 731.6230662017152, 197.19049395354656, 752.04803710737, 204.39930721436588, 772.4464890533116, 211.6785956213246, 792.5570975320389, 219.72283901281554, 812.6677060107663, 227.7670824043065, 831.3694612065173, 238.61197612708753, 849.8161999701656, 249.96381536625577, 867.6611996282954, 262.22228544878243, 885.2864942707182, 274.8117816219416, 901.886102870178, 288.56411144269276, 916.5775062396799, 304.4797984263198, 931.2689096091818, 320.39548540994684, 945.9603129786836, 336.31117239357394, 960.6517163481856, 352.226859377201, 974.141879824281, 369.08781973642147, 986.1565685923132, 387.1098528884698, 998.1712573603454, 405.1318860405181, 1010.6391574687689, 422.84297308075594, 1023.1299933906804, 440.5383239701306, 1034.9740037774513, 458.4933585163423, 1038.1870265702937, 479.9135104686251, 1041.400049363136, 501.33366242090784, 1045.5898715549613, 522.5196146648841, 1052.4392979917238, 543.0678939751715, 1059.0547485572588, 563.6761170649235, 1062.9293692617973, 584.9865309398854, 1066.8039899663358, 606.2969448148473, 1070.6786106708744, 627.6073586898092, 1071.9293319855767, 649.2279757403811, 1073.1308008623798, 670.8544155228391, 1074.7944922305128, 692.4449223051271, 1076.949721710211, 713.9972171021097, 1079.1049511899091, 735.5495118990924, 1080.5918755821478, 757.153760478662, 1081.793344458951, 778.78020026112, 1083.0091658372216, 800.4058192327699, 1084.281072395715, 822.0282307271585, 1085.5529789542084, 843.6506422215472, 1085.75, 865.304640694941, 1085.75, 886.9644289008817, 1086.7206852772558, 908.5895938815827, 1088.263881290292, 930.1943380640894, 1086.310847246305, 951.6349165221694,1082.750000, 973.000000//额头轮廓100点
    
};

//仅仅用与morph
double morph_1[]={
    0.0, 0.0, 12.11111111111111, 0.0, 24.22222222222222, 0.0, 36.33333333333333, 0.0, 48.44444444444444, 0.0, 60.55555555555556, 0.0, 72.66666666666667, 0.0, 84.77777777777779, 0.0, 96.8888888888889, 0.0, 109.00000000000001, 0.0, 121.11111111111113, 0.0, 133.22222222222223, 0.0, 145.33333333333334, 0.0, 157.44444444444446, 0.0, 169.55555555555557, 0.0, 181.66666666666669, 0.0, 193.7777777777778, 0.0, 205.8888888888889, 0.0, 218.00000000000003, 0.0, 230.11111111111114, 0.0, 242.22222222222226, 0.0, 254.33333333333337, 0.0, 266.44444444444446, 0.0, 278.55555555555554, 0.0, 290.66666666666663, 0.0, 302.7777777777777, 0.0, 314.8888888888888, 0.0, 326.9999999999999, 0.0, 339.111111111111, 0.0, 351.22222222222206, 0.0, 363.33333333333314, 0.0, 375.44444444444423, 0.0, 387.5555555555553, 0.0, 399.6666666666664, 0.0, 411.7777777777775, 0.0, 423.8888888888886, 0.0, 435.99999999999966, 0.0, 448.11111111111074, 0.0, 460.22222222222183, 0.0, 472.3333333333329, 0.0, 484.444444444444, 0.0, 496.5555555555551, 0.0, 508.6666666666662, 0.0, 520.7777777777773, 0.0, 532.8888888888883, 0.0, 544.9999999999994, 0.0, 557.1111111111105, 0.0, 569.2222222222216, 0.0, 581.3333333333327, 0.0, 593.4444444444438, 0.0, 605.5555555555549, 0.0, 617.666666666666, 0.0, 629.777777777777, 0.0, 641.8888888888881, 0.0, 653.9999999999992, 0.0, 666.1111111111103, 0.0, 678.2222222222214, 0.0, 690.3333333333325, 0.0, 702.4444444444435, 0.0, 714.5555555555546, 0.0, 726.6666666666657, 0.0, 738.7777777777768, 0.0, 750.8888888888879, 0.0, 762.999999999999, 0.0, 775.1111111111101, 0.0, 787.2222222222211, 0.0, 799.3333333333322, 0.0, 811.4444444444433, 0.0, 823.5555555555544, 0.0, 835.6666666666655, 0.0, 847.7777777777766, 0.0, 859.8888888888877, 0.0, 871.9999999999987, 0.0, 884.1111111111098, 0.0, 896.2222222222209, 0.0, 908.333333333332, 0.0, 920.4444444444431, 0.0, 932.5555555555542, 0.0, 944.6666666666653, 0.0, 956.7777777777764, 0.0, 968.8888888888874, 0.0, 980.9999999999985, 0.0, 993.1111111111096, 0.0, 1005.2222222222207, 0.0, 1017.3333333333318, 0.0, 1029.444444444443, 0.0, 1041.555555555554, 0.0, 1053.6666666666652, 0.0, 1065.7777777777762, 0.0, 1077.8888888888873, 0.0, 1089.9999999999984, 0.0, 1102.1111111111095, 0.0, 1114.2222222222206, 0.0, 1126.3333333333317, 0.0, 1138.4444444444428, 0.0, 1150.5555555555538, 0.0, 1162.666666666665, 0.0, 1174.777777777776, 0.0, 1186.888888888887, 0.0, 1198.9999999999982, 0.0,//上画框
    1199.0, 1749.0, 1186.888888888889, 1749.0, 1174.7777777777778, 1749.0, 1162.6666666666667, 1749.0, 1150.5555555555557, 1749.0, 1138.4444444444446, 1749.0, 1126.3333333333335, 1749.0, 1114.2222222222224, 1749.0, 1102.1111111111113, 1749.0, 1090.0000000000002, 1749.0, 1077.8888888888891, 1749.0, 1065.777777777778, 1749.0, 1053.666666666667, 1749.0, 1041.5555555555559, 1749.0, 1029.4444444444448, 1749.0, 1017.3333333333337, 1749.0, 1005.2222222222226, 1749.0, 993.1111111111115, 1749.0, 981.0000000000005, 1749.0, 968.8888888888894, 1749.0, 956.7777777777783, 1749.0, 944.6666666666672, 1749.0, 932.5555555555561, 1749.0, 920.444444444445, 1749.0, 908.3333333333339, 1749.0, 896.2222222222229, 1749.0, 884.1111111111118, 1749.0, 872.0000000000007, 1749.0, 859.8888888888896, 1749.0, 847.7777777777785, 1749.0, 835.6666666666674, 1749.0, 823.5555555555563, 1749.0, 811.4444444444453, 1749.0, 799.3333333333342, 1749.0, 787.2222222222231, 1749.0, 775.111111111112, 1749.0, 763.0000000000009, 1749.0, 750.8888888888898, 1749.0, 738.7777777777787, 1749.0, 726.6666666666677, 1749.0, 714.5555555555566, 1749.0, 702.4444444444455, 1749.0, 690.3333333333344, 1749.0, 678.2222222222233, 1749.0, 666.1111111111122, 1749.0, 654.0000000000011, 1749.0, 641.88888888889, 1749.0, 629.777777777779, 1749.0, 617.6666666666679, 1749.0, 605.5555555555568, 1749.0, 593.4444444444457, 1749.0, 581.3333333333346, 1749.0, 569.2222222222235, 1749.0, 557.1111111111125, 1749.0, 545.0000000000014, 1749.0, 532.8888888888903, 1749.0, 520.7777777777792, 1749.0, 508.6666666666681, 1749.0, 496.555555555557, 1749.0, 484.44444444444594, 1749.0, 472.33333333333485, 1749.0, 460.22222222222376, 1749.0, 448.1111111111127, 1749.0, 436.0000000000016, 1749.0, 423.8888888888905, 1749.0, 411.7777777777794, 1749.0, 399.66666666666833, 1749.0, 387.55555555555725, 1749.0, 375.44444444444616, 1749.0, 363.3333333333351, 1749.0, 351.222222222224, 1749.0, 339.1111111111129, 1749.0, 327.0000000000018, 1749.0, 314.88888888889073, 1749.0, 302.77777777777965, 1749.0, 290.66666666666856, 1749.0, 278.5555555555575, 1749.0, 266.4444444444464, 1749.0, 254.33333333333528, 1749.0, 242.22222222222416, 1749.0, 230.11111111111305, 1749.0, 218.00000000000193, 1749.0, 205.88888888889082, 1749.0, 193.7777777777797, 1749.0, 181.6666666666686, 1749.0, 169.55555555555748, 1749.0, 157.44444444444636, 1749.0, 145.33333333333525, 1749.0, 133.22222222222413, 1749.0, 121.11111111111302, 1749.0, 109.0000000000019, 1749.0, 96.88888888889079, 1749.0, 84.77777777777968, 1749.0, 72.66666666666856, 1749.0, 60.55555555555745, 1749.0, 48.44444444444633, 1749.0, 36.33333333333522, 1749.0, 24.222222222224108, 1749.0, 12.111111111112997, 1749.0, 1.886490963443066e-12, 1749.0,//下画框
    215.75, 1141.0, 208.41611018489846, 1151.2674457411422, 201.08222036979691, 1161.5348914822844, 190.72701598797977, 1168.6819893413467, 179.7194789241882, 1174.0, 167.10177779175729, 1174.0, 158.1779160291493, 1166.1134992349791, 150.10026060453816, 1156.420312725446, 148.04296268979905, 1144.0507388285932, 145.65108502538487, 1131.7032550761546, 141.6610175840081, 1119.7330527520244, 137.6893715270249, 1107.7574861080996, 134.62912949634912, 1095.5165179853964, 131.6756959849749, 1083.256959849749, 130.42018779680257, 1070.7018779680254, 129.16467960863022, 1058.146796086302, 127.81682901785219, 1045.6014611606697, 126.42343702624152, 1033.0609332361737, 125.75, 1020.480530506468, 125.75, 1007.8628293740371, 125.75, 995.2451282416063, 125.75, 982.6274271091754, 125.75, 970.0097259767446, 132.4322134681002, 959.3084584510397, 139.1195816935655, 948.6086692902952, 149.95523034944696, 943.489482631969, 162.12833190920668, 940.1695458429436, 174.21510851771566, 937.3322203697969, 184.48255425885782, 944.6661101848985, 194.74999999999997, 952.0, //up左耳朵
    993.298286, 1128.136783, 1002.567200105495, 1137.405697105495, 1011.83611421099, 1146.67461121099, 1021.1050283164849, 1155.943525316485, 1032.005298798773, 1162.5728494205202, 1044.6089276161415, 1164.0183597663515, 1056.0582438743525, 1158.5109558432143, 1065.4913348798723, 1149.6445857427561, 1070.654917658079, 1137.5962269216263, 1074.2521207906655, 1125.0201929250427, 1078.1019271625094, 1112.5292547832642, 1083.2655090403537, 1100.4808955762649, 1090.8783273295821, 1089.8108160021031, 1095.4449202841763, 1077.9954230711235, 1096.7492377173764, 1064.9522526964201, 1097.121622, 1051.8626015629563, 1096.879880986997, 1038.7715575376446, 1095.0260974909727, 1025.7950778863694, 1094.814436, 1012.7018961744589, 1094.814436, 999.5936721379965, 1094.814436, 986.4854481015341, 1091.8397167848048, 973.8599544948621, 1087.6458020656912, 961.4429285342087, 1082.4822192874844, 949.394569713079, 1075.581688422363, 938.3236585109854, 1067.0629771881522, 928.8291947884235, 1054.7893646113555, 924.226589905883, 1041.9403208149772, 922.797297, 1028.9740094398976, 921.7840326797358, 1016.3701380000001, 918.182927, //up右耳朵

    137.332564, 936.640409, 133.35695146527283, 896.6364347069207, 130.411009, 856.6495837770279, 125.81260675312663, 816.7705738832108, 124.46154295518947, 776.601691771079, 121.64969425072243, 736.4725586193468, 121.182268, 696.2564868952019, 125.66431377349379, 656.2885660400091, 135.9902762462882, 617.4201159757016, 149.38395669684144, 579.5701168832344, 166.7416618307992, 543.2803546517158, 184.48224018459536, 507.1747147974142, 202.18141980972584, 471.07629044810744, 223.35701569944217, 436.8695585176413, 248.83695233854695, 405.9340782214917, 276.92438789076107, 377.14087210923896, 306.5349417333153, 349.9930746133478, 337.9498128685516, 324.8611777051588, 371.6966715576771, 302.99071375734684, 407.73589906314555, 286.1558234226568, 446.5832628345803, 275.696918190408, 482.90037189025014, 258.5829387104009, 519.8649017736733, 242.82964082450258, 557.480473738142, 228.56166562010793, 596.5604748029068, 219.3241893630907, 636.0555540999785, 211.9674906723351, 676.2482472883133, 210.2199824704301, 715.5059885804861, 217.71969075348733, 752.1978535711638, 232.60313163731928, 785.1560979916605, 255.6739030887931, 822.3271618827447, 271.02439778282485, 855.5441782964305, 292.8986852103633, 886.6286974493761, 318.41788663978144, 918.9812382436735, 342.33063375927117, 949.8615925013544, 368.0335255498811, 979.5713545661142, 395.15983028721496, 1007.6725995996944, 423.92200222664223, 1034.3499866393029, 453.9875050733941, 1059.278688531079, 485.5638600346351, 1075.2986148294422, 522.4111867173426, 1086.8377288450693, 560.4984746677602, 1090.8307825196641, 600.5116183599961, 1099.035997531267, 639.8966512692207, 1105.0839910839006, 679.6406147689679, 1101.1331795428746, 719.3356273341121, 1096.4015730246174, 759.2660738175574, 1089.8124733407215, 798.8967647670726, 1083.0359844485174, 838.5217447365619, 1077.7104192127865, 878.3973603517741, 1071.7425840000003, 918.1829269999993,//up头发
    5.823006, 1679.554054, 23.0036451495477, 1677.246869, 40.08977520414622, 1674.5464486228193, 57.1607977223443, 1671.1322437156325, 73.41506158173483, 1665.0883370326176, 88.03221360911532, 1655.7705675627842, 101.05825039601102, 1644.3056256039888, 113.06339754383481, 1631.745543244379, 123.14278799647127, 1617.6067180035288, 135.4528774552259, 1605.2966285447742, 146.81622354425508, 1592.139163292059, 157.69159927275444, 1578.5449436480687, 167.39387730771728, 1564.092934042103, 176.73007306585862, 1549.4748805947008, 182.22612292463, 1533.2087137829838, 191.60496971543796, 1518.5475551114416, 202.22491747451252, 1504.781450155633, 213.36994860869484, 1491.4074123964822, 224.3593825325476, 1477.90632475431, 237.86430079367466, 1467.180226391624, 252.69182599999982, 1458.064272,//up左衬衣
    1198.637772, 1663.403757, 1188.574871766067, 1648.9350265519536, 1175.8681974577237, 1636.8896334846297, 1165.864057439212, 1622.318334559451, 1156.5561044650387, 1607.294867313318, 1146.5521352315754, 1592.744660069382, 1134.4480369704556, 1580.212813623498, 1119.0298810816855, 1571.6881440821483, 1103.216365343815, 1563.781386201771, 1088.8014577066565, 1554.476020413313, 1080.9076912655853, 1538.6566706605158, 1074.341486373226, 1522.2411580738697, 1066.0809819401727, 1506.6853389987443, 1055.5423015878937, 1492.6220645878936, 1043.1367520261945, 1480.032593247377, 1031.6876589044332, 1466.579204903353, 1018.2639657856181, 1455.0731819926048, 1003.1852325977221, 1445.915668991675, 989.261429348082, 1435.0891499844784, 973.5776253762808, 1427.1999029941205, 956.383322, 1423.456493,//up右衬衣
    218.084047, 1141.979895, 239.45007937679134, 1159.995594391859, 262.4086509523726, 1175.8777846183896, 287.0056709581494, 1189.1302246669745, 312.28617434270984, 1200.536185536482, 338.7813021686748, 1208.888266, 366.7318993946011, 1208.888266, 394.6824966205274, 1208.888266, 422.6330938464537, 1208.888266, 450.58369107237996, 1208.888266, 478.4738964963866, 1207.3157596575631, 506.28391322558934, 1204.552281948121, 534.2188405581154, 1204.2688544446255, 562.0379870692086, 1202.366520129112, 589.8887846944891, 1203.822779245142, 617.7551887834544, 1201.966711, 645.7057860093807, 1201.966711, 673.6540424905378, 1201.8964107429215, 701.5427335130066, 1200.0371640300766, 729.4807567225488, 1199.659525, 757.4313539484751, 1199.659525, 785.3819511744015, 1199.659525, 813.2472939368399, 1197.7800594265807, 841.1784893760284, 1197.35234, 868.4277143073141, 1191.6550189673897, 895.9159821369009, 1186.6655630518385, 922.5601383424654, 1178.4589722583844, 946.7788543276092, 1164.5331698496366, 969.5188576426957, 1148.3375045562725, 988.683916, 1128.136783//下颚
};



double morph_2[]={
    0.0, 0.0, 12.11111111111111, 0.0, 24.22222222222222, 0.0, 36.33333333333333, 0.0, 48.44444444444444, 0.0, 60.55555555555556, 0.0, 72.66666666666667, 0.0, 84.77777777777779, 0.0, 96.8888888888889, 0.0, 109.00000000000001, 0.0, 121.11111111111113, 0.0, 133.22222222222223, 0.0, 145.33333333333334, 0.0, 157.44444444444446, 0.0, 169.55555555555557, 0.0, 181.66666666666669, 0.0, 193.7777777777778, 0.0, 205.8888888888889, 0.0, 218.00000000000003, 0.0, 230.11111111111114, 0.0, 242.22222222222226, 0.0, 254.33333333333337, 0.0, 266.44444444444446, 0.0, 278.55555555555554, 0.0, 290.66666666666663, 0.0, 302.7777777777777, 0.0, 314.8888888888888, 0.0, 326.9999999999999, 0.0, 339.111111111111, 0.0, 351.22222222222206, 0.0, 363.33333333333314, 0.0, 375.44444444444423, 0.0, 387.5555555555553, 0.0, 399.6666666666664, 0.0, 411.7777777777775, 0.0, 423.8888888888886, 0.0, 435.99999999999966, 0.0, 448.11111111111074, 0.0, 460.22222222222183, 0.0, 472.3333333333329, 0.0, 484.444444444444, 0.0, 496.5555555555551, 0.0, 508.6666666666662, 0.0, 520.7777777777773, 0.0, 532.8888888888883, 0.0, 544.9999999999994, 0.0, 557.1111111111105, 0.0, 569.2222222222216, 0.0, 581.3333333333327, 0.0, 593.4444444444438, 0.0, 605.5555555555549, 0.0, 617.666666666666, 0.0, 629.777777777777, 0.0, 641.8888888888881, 0.0, 653.9999999999992, 0.0, 666.1111111111103, 0.0, 678.2222222222214, 0.0, 690.3333333333325, 0.0, 702.4444444444435, 0.0, 714.5555555555546, 0.0, 726.6666666666657, 0.0, 738.7777777777768, 0.0, 750.8888888888879, 0.0, 762.999999999999, 0.0, 775.1111111111101, 0.0, 787.2222222222211, 0.0, 799.3333333333322, 0.0, 811.4444444444433, 0.0, 823.5555555555544, 0.0, 835.6666666666655, 0.0, 847.7777777777766, 0.0, 859.8888888888877, 0.0, 871.9999999999987, 0.0, 884.1111111111098, 0.0, 896.2222222222209, 0.0, 908.333333333332, 0.0, 920.4444444444431, 0.0, 932.5555555555542, 0.0, 944.6666666666653, 0.0, 956.7777777777764, 0.0, 968.8888888888874, 0.0, 980.9999999999985, 0.0, 993.1111111111096, 0.0, 1005.2222222222207, 0.0, 1017.3333333333318, 0.0, 1029.444444444443, 0.0, 1041.555555555554, 0.0, 1053.6666666666652, 0.0, 1065.7777777777762, 0.0, 1077.8888888888873, 0.0, 1089.9999999999984, 0.0, 1102.1111111111095, 0.0, 1114.2222222222206, 0.0, 1126.3333333333317, 0.0, 1138.4444444444428, 0.0, 1150.5555555555538, 0.0, 1162.666666666665, 0.0, 1174.777777777776, 0.0, 1186.888888888887, 0.0, 1198.9999999999982, 0.0,//上画框
    1199.0, 1749.0, 1186.888888888889, 1749.0, 1174.7777777777778, 1749.0, 1162.6666666666667, 1749.0, 1150.5555555555557, 1749.0, 1138.4444444444446, 1749.0, 1126.3333333333335, 1749.0, 1114.2222222222224, 1749.0, 1102.1111111111113, 1749.0, 1090.0000000000002, 1749.0, 1077.8888888888891, 1749.0, 1065.777777777778, 1749.0, 1053.666666666667, 1749.0, 1041.5555555555559, 1749.0, 1029.4444444444448, 1749.0, 1017.3333333333337, 1749.0, 1005.2222222222226, 1749.0, 993.1111111111115, 1749.0, 981.0000000000005, 1749.0, 968.8888888888894, 1749.0, 956.7777777777783, 1749.0, 944.6666666666672, 1749.0, 932.5555555555561, 1749.0, 920.444444444445, 1749.0, 908.3333333333339, 1749.0, 896.2222222222229, 1749.0, 884.1111111111118, 1749.0, 872.0000000000007, 1749.0, 859.8888888888896, 1749.0, 847.7777777777785, 1749.0, 835.6666666666674, 1749.0, 823.5555555555563, 1749.0, 811.4444444444453, 1749.0, 799.3333333333342, 1749.0, 787.2222222222231, 1749.0, 775.111111111112, 1749.0, 763.0000000000009, 1749.0, 750.8888888888898, 1749.0, 738.7777777777787, 1749.0, 726.6666666666677, 1749.0, 714.5555555555566, 1749.0, 702.4444444444455, 1749.0, 690.3333333333344, 1749.0, 678.2222222222233, 1749.0, 666.1111111111122, 1749.0, 654.0000000000011, 1749.0, 641.88888888889, 1749.0, 629.777777777779, 1749.0, 617.6666666666679, 1749.0, 605.5555555555568, 1749.0, 593.4444444444457, 1749.0, 581.3333333333346, 1749.0, 569.2222222222235, 1749.0, 557.1111111111125, 1749.0, 545.0000000000014, 1749.0, 532.8888888888903, 1749.0, 520.7777777777792, 1749.0, 508.6666666666681, 1749.0, 496.555555555557, 1749.0, 484.44444444444594, 1749.0, 472.33333333333485, 1749.0, 460.22222222222376, 1749.0, 448.1111111111127, 1749.0, 436.0000000000016, 1749.0, 423.8888888888905, 1749.0, 411.7777777777794, 1749.0, 399.66666666666833, 1749.0, 387.55555555555725, 1749.0, 375.44444444444616, 1749.0, 363.3333333333351, 1749.0, 351.222222222224, 1749.0, 339.1111111111129, 1749.0, 327.0000000000018, 1749.0, 314.88888888889073, 1749.0, 302.77777777777965, 1749.0, 290.66666666666856, 1749.0, 278.5555555555575, 1749.0, 266.4444444444464, 1749.0, 254.33333333333528, 1749.0, 242.22222222222416, 1749.0, 230.11111111111305, 1749.0, 218.00000000000193, 1749.0, 205.88888888889082, 1749.0, 193.7777777777797, 1749.0, 181.6666666666686, 1749.0, 169.55555555555748, 1749.0, 157.44444444444636, 1749.0, 145.33333333333525, 1749.0, 133.22222222222413, 1749.0, 121.11111111111302, 1749.0, 109.0000000000019, 1749.0, 96.88888888889079, 1749.0, 84.77777777777968, 1749.0, 72.66666666666856, 1749.0, 60.55555555555745, 1749.0, 48.44444444444633, 1749.0, 36.33333333333522, 1749.0, 24.222222222224108, 1749.0, 12.111111111112997, 1749.0, 1.886490963443066e-12, 1749.0,//下画框
    185.75, 1090.0, 181.2764241700629, 1094.473575829937, 176.80284834012582, 1098.9471516598742, 171.3890804757166, 1095.78344828543, 165.96407292541048, 1092.5284437552464, 161.02343922506262, 1088.7890653751044, 157.76843469487895, 1083.3640578247982, 154.51343016469528, 1077.939050274492, 151.31164387292415, 1072.4828767776173, 148.1727754276246, 1066.9898569983432, 145.03390698232505, 1061.496837219069, 141.8950385370255, 1056.0038174397948, 139.2574950161716, 1050.268737540429, 136.90785787874555, 1044.3946446968637, 134.6247591004984, 1038.4990364019936, 133.09033524977454, 1032.361340999098, 131.55591139905067, 1026.2236455962025, 130.0214875483268, 1020.085950193307, 128.90331689306862, 1013.9267817485197, 129.79803205905603, 1007.6637755866078, 130.69274722504343, 1001.4007694246959, 131.58746239103084, 995.137763262784, 136.92727715600222, 994.0, 143.25386876700375, 994.0, 149.17709975064918, 995.4562598503895, 154.6021073009553, 998.7112643805732, 160.02711485126144, 1001.9662689107569, 164.80284834012568, 1006.0528483401257, 169.27642417006277, 1010.5264241700628, 173.74999999999986, 1014.9999999999999,//down左耳朵
    1087.892881, 1065.842782, 1091.7650751218746, 1061.9705878781253, 1095.6372692437492, 1058.0983937562507, 1099.5094633631268, 1054.2261996318791, 1103.3816573651213, 1050.3540053901247, 1107.2538513671159, 1046.4818111483703, 1111.1260453691104, 1042.6096169066159, 1114.998239371105, 1038.7374226648615, 1118.1610351349586, 1034.283660984076, 1121.1986342189816, 1029.7272625774722, 1124.2362333030046, 1025.1708641708683, 1127.2738323870276, 1020.6144657642643, 1129.422215, 1015.7888342627679, 1129.422215, 1010.3127248194714, 1129.422215, 1004.836615376175, 1129.0533030361814, 999.3970354207521, 1127.9793494822948, 994.0272683495418, 1126.905395928408, 988.6575012783316, 1125.8314423745214, 983.2877342071213, 1124.7176888479116, 977.9293292350476, 1122.794898636328, 972.8018881152298, 1120.8721084247445, 967.6744469954119, 1118.949318213161, 962.5470058755941, 1115.471004207759, 960.114808407215, 1110.0694031055598, 961.0150751275145, 1104.6678020033605, 961.9153418478139, 1100.8914800393773, 965.6964259771204, 1097.3276753595849, 969.8541983180802, 1093.7638706797925, 974.01197065904, 1090.200066, 978.1697429999998,//down右耳朵
  
    128.103823, 971.248187, 114.07694231108822, 925.9687837542227, 112.78558560987545, 879.149769042747, 102.74756815761847, 832.9651570393318, 92.6155347444612, 786.7180147665403, 79.05736061703583, 741.4221428753843, 70.95158778459768, 694.9787676421228, 74.88956984975215, 647.7229869967078, 64.59236738750653, 601.6026001136365, 63.73959689375897, 555.0070053222589, 75.27582055772062, 509.2712349988498, 85.51134046866679, 463.48654806266643, 113.64338961257339, 427.0122806973633, 144.89175973611597, 391.5070538747942, 173.47271306850382, 353.8105133618916, 201.29096148217215, 315.51144232911076, 235.2953671239259, 282.56434672085874, 268.1202335163158, 248.429790493361, 305.89930767708717, 219.7800481956152, 345.37111821476736, 193.50282974135143, 386.54284311460896, 169.9761305269522, 430.1661661384995, 151.5893540938731, 475.287741624545, 137.1550930682149, 520.7124730826197, 125.36880397833504, 568.0010316914608, 122.54548677508086, 615.3168419283201, 125.59601157626156, 662.2517995732926, 131.4426463425223, 708.0387158612164, 143.7533343482997, 754.4805255795618, 153.01798278333274, 800.7382614494046, 162.8077613343787, 845.5224392949207, 178.15297538859127, 888.7061322773865, 197.74308327348405, 930.9089734883895, 218.70921889065139, 966.0930088313117, 250.43153528554456, 1000.3899339022034, 281.9196776181693, 1026.3976263596471, 321.427549237819, 1054.9237884866038, 359.2304544464721, 1080.8729857993833, 398.91874053418405, 1105.4730202888186, 439.3445829637941, 1125.9929455641384, 482.0944271020871, 1136.6375179718943, 528.2355480008999, 1144.8884903974874, 574.9225675825744, 1152.5518277515746, 621.7112471316306, 1154.801252, 669.0746259986689, 1154.801252, 716.4942053636638, 1154.334161900199, 763.8915925540352, 1149.9153228974085, 811.1040842380908, 1146.4123589788446, 858.3941016935569, 1141.7274494076414, 905.4924820963646, 1127.11503, 950.4835199999999,//down头发
    5.75, 1444.0, 19.99173836936072, 1441.1516523261278, 34.233476738721464, 1438.3033046522557, 47.799050024395314, 1433.1803799902418, 61.94114210638071, 1430.1348096489367, 76.0777766578139, 1426.906349526339, 90.05445346172766, 1423.0, 104.57823383229834, 1423.0, 119.10201420286901, 1423.0, 133.39064303810784, 1421.089839240473, 147.7802580671574, 1420.0, 158.6270457105941, 1411.122954289406, 169.64244100616875, 1401.686047195065, 178.76355535522737, 1390.9661116119316, 183.9484873165942, 1377.4045380502175, 188.54130993729896, 1363.6260701881033, 192.5586909835813, 1349.6695815574656, 198.11855556426843, 1336.3857407262192, 205.3502285584165, 1323.799542883167, 212.6770663307362, 1311.3411670865798, 221.7499999999999, 1300.0000000000002,//down左衬衣
    1198.637772, 1488.05768, 1187.5185999167718, 1485.2778862804034, 1176.4330160147056, 1482.3726594225016, 1165.4126241729095, 1479.223976429054, 1154.7234791984208, 1475.1063329953233, 1143.7824388948354, 1471.7255315526415, 1132.8098791709813, 1468.4222340569938, 1121.9366590018706, 1464.797827333957, 1110.8839389610825, 1461.8961147167088, 1099.7796571126287, 1459.3932894856534, 1089.5282869741866, 1454.2676040461627, 1079.6327024330856, 1448.4937935734356, 1069.2622460456969, 1443.6904619102866, 1063.7231646855478, 1435.3267946374417, 1060.6778687362553, 1424.3989154725107, 1055.5362681304075, 1414.157728414527, 1048.3764004545164, 1405.2078940136187, 1040.5375226981575, 1396.8658026981575, 1032.7958049952683, 1388.4468130334756, 1025.8371916758908, 1379.3410674009078,1018.677324, 1370.391233,//down右衬衣
    192.70501, 1098.143375, 200.76737145420483, 1151.0807647781926, 208.76622338996924, 1203.9175639521548, 221.0157019209631, 1256.0587828180833, 239.00212187470322, 1305.8991890769503, 266.7914823600711, 1351.5395951321866, 300.46798407867584, 1393.1964665983448, 333.9311071927846, 1435.0253704909808, 374.21040437315924, 1470.265242029702, 405.4704456009757, 1513.18665400298, 439.5478703171429, 1554.2174745402651, 484.364366553864, 1582.02079613035, 530.142190729659, 1608.6194487296589, 573.8548979862709, 1635.9279347538838, 626.6331512822824, 1643.930710951102, 680.0395442261057, 1641.8918209975006, 732.9149918936025, 1636.0803804854802, 783.4421252970623, 1618.5365747480782, 830.2975438744503, 1592.7796802753298, 864.0786848751708, 1552.6856653051975, 896.6417564543787, 1510.1550143632517, 930.477485393397, 1468.6395822304905, 959.583505840675, 1424.212358789877, 989.9062252918898, 1380.1742417015498, 1020.4708508976928, 1336.8107712046144, 1037.9917985574384, 1287.200000551445, 1050.5022128058865, 1236.1433698122978, 1061.1763593362775, 1184.3784387502055, 1070.5058430489626, 1131.7041174169212, 1083.27851, 1079.6858930000003//下颚
};

//point to keypoint
void PV2KPV(vector<Point2f> Points,  vector<KeyPoint> &key_Points){
	for (int i=0; i<Points.size(); i++)
    	key_Points.push_back(KeyPoint(Points[i], 4));
        
}
void Trans_Point_Vec(Mat H,vector<Point2f> src, vector<Point2f> &des){
//    cout<<src.size()<<endl;
    for (int i=0; i<src.size(); i++){
        double coordinates[3] = {src[i].x, src[i].y, 1};
        Mat originVector(3, 1, CV_64F, coordinates);
        //Mat transVector(3, 1, CV_64F, 0);
        Mat transVector=H*originVector;
//        cout<<transVector<<endl;
        double transCoordinates[3] = {transVector.at<double>(0, 0), transVector.at<double>(1, 0), transVector.at<double>(2, 0)};
//        cout<<"t:"<<transCoordinates[0]<<transCoordinates[1]<<transCoordinates[2]<<endl;
        des.push_back(Point2f((double)transCoordinates[0]/transCoordinates[2], (double)transCoordinates[1]/transCoordinates[2]));
    }
}

//normalize  determinant
void norm_det(Mat src, Mat &dst){
    
    if (determinant(src)<0)
        dst=src/-pow(-determinant(src), 1.0/src.rows);
    else
        dst=src/pow(determinant(src), 1.0/src.rows);
    cout<<"det="<<determinant(src)<<endl;
}




void add_morphonly_point(vector<Point2f> &Points, double *morph){
    //morph_only point number
    //画框+左耳朵+右耳朵+头发（待修改）+左衬衣+右衬衣+下颚
    int num_match=200+30+30+50+21+21+30;
    for (int i=0; i<2*num_match; i+=2){
        Points.push_back(Point2f(morph[i], morph[i+1]));
    }
}

void prep_morph_point(vector<Point2f> &Points,int num, double *morph){
    Points.erase(Points.begin(), Points.begin() + num);
    add_morphonly_point(Points,morph);
}
int main(int argc, const char * argv[]) {
    
    Mat img1 = imread("up_mod.png");
    Mat img2 = imread("down_mod.png");
    cout<<"Size of image1:"<<img1.size<<endl;
    cout<<"Size of image2:"<<img2.size<<endl;
    cout<<img1.at<double>(0,1);

    int manual_match=1;
    vector<KeyPoint> key_Points1;
    vector<KeyPoint> key_Points2;
    vector<Point2f> Points1;
    vector<Point2f> Points2;
    
    if (manual_match){
        int num_match=68+100;
        
        for (int i=0; i<2*num_match; i+=2){
            Points1.push_back(Point2f(match_1[i], match_1[i+1]));
        }
        for (int i=0; i<2*num_match; i+=2){
            Points2.push_back(Point2f(match_2[i], match_2[i+1]));
        }
        PV2KPV(Points1, key_Points1);
        PV2KPV(Points2, key_Points2);
    }
    
    Mat img1_kp;
    Mat img2_kp;
    int drawkeypoints=0;
    if (drawkeypoints){
        drawKeypoints(img1, key_Points1, img1_kp);
        drawKeypoints(img2, key_Points2, img2_kp);
    }else {
        img1_kp=img1;
        img2_kp=img2;
    }
imwrite("img1_kp.jpg",img1_kp);
imwrite("img2_kp.jpg", img2_kp);


    Mat F=findFundamentalMat(Points1,Points2, FM_RANSAC);
    int drawEpiline=0;
    if (drawEpiline) {
        vector<Vec3f> lines1;
        computeCorrespondEpilines(Points1,1,F, lines1);
        for (int i=0; i<lines1.size(); i++){
            line(img2_kp, Point(0, -lines1[i][2]/lines1[i][1]), Point(img2.cols,	-(lines1[i][2]+lines1[i][0]*img2.cols)/lines1[i][1]), Scalar(255, 255, 255));
        }

        vector<Vec3f> lines2;
        computeCorrespondEpilines(Points2,2,F, lines2);
        for (int i=0; i<lines2.size(); i++){
            line(img1_kp, Point(0, -lines2[i][2]/lines2[i][1]), Point(img1.cols,	-(lines2[i][2]+lines2[i][0]*img1.cols)/lines2[i][1]), Scalar(255, 255, 255));
        }
        imwrite("img1_kp_Epi.jpg", img1_kp);
        imwrite("img2_kp_Epi.jpg", img2_kp);
    }
    
    //tsl平移矩阵，防止用h1，h2 warp后
    cv::Mat tsl =Mat::zeros(3, 3, CV_64F);
    tsl.at<double>(0, 0) = 1;
    tsl.at<double>(1, 1) = 1;
    tsl.at<double>(2, 2) = 1;
    tsl.at<double>(0, 2) = 500; //水平平移量
    tsl.at<double>(1, 2) = 1000; //竖直平移量
    //cout<<tsl<<endl;
    
	Mat h1, h2;
	stereoRectifyUncalibrated(Points1, Points2, F, img1_kp.size(), h1, h2);
    
    norm_det(h1, h1);
    norm_det(h2, h2);
    h1=tsl*h1;
    h2=tsl*h2;
    norm_det(h1, h1);
    norm_det(h2, h2);
    
    //add_morphonly_point(<#vector<Point2f> &Points#>, <#double *morph#>)
    prep_morph_point(Points1,17, morph_1);
    prep_morph_point(Points2,17, morph_2);
    
    Mat img1_morph_kp,img2_morph_kp;
    int draw_morph_keypoints=1;
    if (draw_morph_keypoints){
        PV2KPV(Points1, key_Points1);
        PV2KPV(Points2, key_Points2);
        drawKeypoints(img1, key_Points1, img1_morph_kp);
        drawKeypoints(img2, key_Points2, img2_morph_kp);
        }else {
            img1_morph_kp=img1;
            img2_morph_kp=img2;
        }
    imwrite("img1_morph_kp.jpg",img1_morph_kp);
    imwrite("img2_morph_kp.jpg", img2_morph_kp);
    
    vector<Point2f>rec_Points1,rec_Points2;
    Trans_Point_Vec(h1, Points1, rec_Points1);
    Trans_Point_Vec(h2, Points2, rec_Points2);
    
//    cout<<rec_Points1<<endl;
//    cout<<rec_Points2<<endl;
    
    Mat rec_img1, rec_img2;
	warpPerspective(img1_kp, rec_img1, h1,Size(4*img1.cols,2*img1.rows),INTER_LINEAR, BORDER_CONSTANT,Scalar(104,144,145) );
	warpPerspective(img2_kp, rec_img2, h2,Size(4*img2.cols,2*img2.rows),INTER_LINEAR, BORDER_CONSTANT,Scalar(104,144,145) );
    //Scalar(104,144,145) yellow
    imwrite("rec_img1.jpg", rec_img1);
    imwrite("rec_img2.jpg", rec_img2);

    Mat dest, th_inv;;
    vector<cv::Point2f> dest_points;
    
    int num_frame=40;
    for (int i=0; i<=num_frame; i++){
        double s=(double)i/num_frame;
        ImageMorphing(rec_img1, rec_Points1, rec_img2,rec_Points2,dest, dest_points,s );
        th_inv=(s*h2+(1-s)*h1).inv();
        
        warpPerspective(dest,dest,th_inv, dest.size(),INTER_LINEAR, BORDER_CONSTANT,Scalar(104,144,145));
        //Scalar(104,144,145);
        imwrite("dest"+num2str(i)+".jpg", dest);
    }
    

    return 0;
}

